(()=>{"use strict";const a=require("express");var e=a.Router();e.get("/",(function(a,e){return e.send("Hello World!, ini adalah API Kelompok 5 LAGOS!")})),e.get("/kecepatan",(function(a,e){var t=a.query,r=t.s,n=t.t;if(r&&n){if(isNaN(r)||isNaN(n))return e.status(400).json({ERROR:"Inputan/parameter harus berupa angka"});var s=parseInt(r)/parseInt(n);return e.json({kecepatan:"jarak(s) m / waktu(t) detik",Hasil:"".concat(s," m/s")})}return e.status(400).json({ERROR:"Parameter kosong / tidak lengkap"})}));var t=65e-6;e.get("/rupiahToDollar",(function(a,e){var r=a.query.rupiah;if(r){if(isNaN(r))return e.status(400).json({ERROR:"Inputan/parameter harus berupa angka"});var n=parseInt(r)*t;return e.json({konversi:"rupiah -> dollar",Hasil:"Rp.".concat(r," = $").concat(n.toFixed(2))})}return e.status(400).json({ERROR:"Tidak ada parameter yang diberikan"})})),e.get("/dollarToRupiah",(function(a,e){var r=a.query.dollar;if(r){if(isNaN(r))return e.status(400).json({ERROR:"Inputan/parameter harus berupa angka"});var n=parseInt(r)/t;return e.json({konversi:"dollar -> rupiah",Hasil:"$".concat(r," = Rp.").concat(n.toFixed(2))})}return e.status(400).json({ERROR:"Tidak ada parameter yang diberikan"})}));var r=function(a){return a<18.5?"Berat badan kurang":a>=18.5&&a<=24.9?"Berat badan normal":"Berat badan lebih"};e.get("/beratBadan",(function(a,e){var t=a.query,n=t.gender,s=t.tinggi,u=t.berat;if(!(n&&s&&u))return e.status(400).json({ERROR:"Parameter kosong / tidak lengkap"});if(isNaN(s)||isNaN(u))return e.status(400).json({ERROR:"berat & tinggi badan harus berupa angka"});if("laki-laki"===n){var i=parseInt(s)-100-.1*(parseInt(s)-100),o=parseInt(s)/100,l=parseInt(u)/(o*o),p=r(l);return e.json({Gender:"laki-laki","Berat Badan Ideal":"".concat(i," kg"),BMI:l,Status:p})}if("perempuan"===n){var g=parseInt(s)-100-.15*(parseInt(s)-100),c=parseInt(s)/100,d=parseInt(u)/(c*c),R=r(d);return e.json({Gender:"perempuan","Berat Badan Ideal":"".concat(g," kg"),BMI:d,Status:R})}})),e.get("/umur",(function(a,e){var t=a.query,r=t.thn,n=t.bln,s=t.tgl,u=(new Date).getFullYear();if(r&&n&&s){if(isNaN(r)||isNaN(n)||isNaN(s))return e.status(400).json({ERROR:"Inputan/parameter harus berupa angka"});if(n<1||n>12||s<1||s>31||r>u)return e.status(400).json({ERROR:"Inputan/parameter tidak valid"});var i=new Date,o=new Date(r,n-1,s),l=i.getFullYear()-o.getFullYear(),p=i.getMonth()-o.getMonth();return(p<0||0===p&&i.getDate()<o.getDate())&&l--,e.json({"Tanggal Lahir":"".concat(r,"-").concat(n,"-").concat(s),Umur:"".concat(l," tahun")})}return e.status(400).json({ERROR:"Parameter kosong / tidak lengkap"})})),e.post("/calculate-calories",(function(a,e){var t=a.body,r=t.name,n=t.gender,s=t.weight,u=t.height,i=t.age,o=t.activity;if(!(r&&n&&s&&u&&i&&o))return e.status(400).json({message:"All fields are required: name,gender, weight, height, age, activity"});var l=parseFloat(o);if(isNaN(l)||l<1.2||l>1.9)return e.status(400).json({message:"Activity must be a number between 1.2 and 1.9"});var p,g=parseInt(s),c=parseInt(u),d=parseInt(i);if("male"===n)p=(66.5+13.75*g+5.003*c-6.75*d)*l;else{if("female"!==n)return e.status(400).json({message:'Invalid gender. Must be "male" or "female".'});p=(655.1+9.563*g+1.85*c-4.676*d)*l}return e.json({name:r,dailyCalories:p.toFixed(2)})}));const n=e;var s=a();s.use(a.json()),s.use(a.urlencoded({extended:!1})),s.use("/",n),s.listen(3e3,(function(){console.log("Example app listening at http://localhost:".concat(3e3))}))})();